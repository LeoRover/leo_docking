#!/usr/bin/env python3

import sys
import rospy
import actionlib
from actionlib_msgs.msg import GoalStatus
from leo_docking.msg import PerformDockingAction, PerformDockingGoal


def done_callback(status, result):
    if status == GoalStatus.ABORTED:
        log_method = rospy.logerr
    elif status == GoalStatus.PREEMPTED:
        log_method = rospy.logwarn
    else:
        log_method = rospy.loginfo

    log_method(result)


def feedback_callback(feedback):
    rospy.loginfo(feedback.current_state)


if __name__ == "__main__":
    rospy.init_node("docking_client", disable_signals=True)
    myargv = rospy.myargv(argv=sys.argv)

    try:
        board_id = str(myargv[1])
    except IndexError as e:
        board_id = "1"

    try:
        timeout = float(myargv[2])
    except IndexError as e:
        timeout = 3.0

    try:
        check_interval = float(myargv[3])
    except IndexError as e:
        check_interval = 2.0

    client = actionlib.SimpleActionClient(
        "leo_docking_action_server", PerformDockingAction
    )

    rospy.loginfo(f"Waiting for 'leo_docking_action_server' server.")
    server_up = client.wait_for_server(rospy.Duration(secs=timeout))

    if not server_up:
        rospy.logerr(f"Server 'leo_docking_action_server' not active.")
        rospy.signal_shutdown(f"Server 'leo_docking_action_server' not active.")
        exit()

    rospy.loginfo(f"Docking server active.")
    goal = PerformDockingGoal(board_id=board_id)

    rate = rospy.Rate(10)
    status = None

    client.send_goal(goal, feedback_cb=feedback_callback, done_cb=done_callback)
    rospy.loginfo(f"Sending goal: board_id={board_id}")

    last_check_time = rospy.Time.now()

    while server_up and status not in [
        GoalStatus.SUCCEEDED,
        GoalStatus.ABORTED,
        GoalStatus.PREEMPTED,
    ]:
        try:
            if (rospy.Time.now() - last_check_time).to_sec() > check_interval:
                server_up = client.wait_for_server(rospy.Duration(secs=timeout))
                last_check_time = rospy.Time.now()
            status = client.get_state()
            rate.sleep()
        except KeyboardInterrupt as e:
            rospy.logwarn(f"Caught Ctrl+C. Canceling docking.")
            client.cancel_goal()
    
    if not server_up:
        rospy.logerr(f"Docking Server stopped responding!")

    rospy.signal_shutdown(f"Docking finished.")
